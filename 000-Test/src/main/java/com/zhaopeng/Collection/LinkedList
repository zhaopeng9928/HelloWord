LinkedList底层是双向链表
    1.单向链表：

        每个节点：
                    数据域   指针域
                     data    next

     单向链表由若干节点组成，每个节点除了存储数据外，还保存了下个节点的引用

            头节点---节点---节点---（若干节点）---节点---尾节点

        优点：
            添加/删除元素 只需要修改一下节点的next指针域即可，不需要像数组一样，扩容、复制元素，效率高
        缺点：
            每次访问元素， 总是从头节点开始逐个查找,无法访问节点的前一个节点

    2.双向链表：

        每个节点：
                       指针域   数据域   指针域
                        prev    data    next

        双向链表由若干节点组成，每个节点除了存储数据外，还有一个指针指向下个节点，有一个指针指向上一个节点

            头节点---节点---节点---（若干节点）---节点---尾节点

        优点：
            添加/删除元素 只需要修改一下节点的prev/next指针域即可，不需要像数组一样，扩容、复制元素，效率高
        缺点：
            每次访问元素,要么从头节点开始逐个查找，要么从尾节点开始逐个查找


双向链表与单向链表的区别：
        双向链表不仅可以访问某个节点的next后继，还可以访问某个节点的前驱

LinkedList新增的方法：
        	主要增加了针对头结点与尾结点进行操作的方法, 即针对第一个元素和最后一个元素进行操作的方法

        	void	addFirst(E e)  添加到头部
            void	addLast(E e) 添加到尾部
            E       element()返回第一个元素
            E       getFirst() 返回第一个元素
            E       getLast()返回最后一个元素
            boolean	offer(E e) 把元素添加到尾部.
            boolean	offerFirst(E e) 添加到状况.
            boolean	offerLast(E e) 添加到尾部
            E       peek() 返回第一个元素
            E       peekFirst() 返回第一个元素.
            E       peekLast() 返回最后一个元素
            E       poll() 删除第一个元素并返回.
            E       pollFirst() 删除第一个元素并返回.
            E       pollLast() 删除最后一个元素并返回
            E       pop()删除第一个元素并返回.
            void	push(E e) 在头部添加元素
            E       removeFirst() 删除第一个元素并返回
            E       removeLast() 删除最后一个元素并返回


经常使用push( E ) / pop() 模拟栈, 栈的特点是先进后出/后进先出.   push( E )把元素添加到链表的头部,  pop()把链表头部的元素删除并返回
使用offer( E ) / poll()  模拟队列,  队列的特点是先进先出, offer( E )添加元素是在链表的尾部添加,  poll() 是把链表的头部元素删除并返回




